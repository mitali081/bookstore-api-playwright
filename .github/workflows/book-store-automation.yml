name: Bookstore API Automation

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      env:
        description: 'Select environment'
        required: true
        default: qa
        type: choice
        options:
          - dev
          - qa
          - prod

jobs:
  # Automatic triggers - commented out to prevent automatic runs
  # run-tests-auto:
  #   runs-on: ubuntu-latest
  #   if: github.event_name != 'workflow_dispatch'
  #   strategy:
  #     matrix:
  #       environment: [dev, qa, prod]
  #     fail-fast: false
  #   env:
  #     ENV: ${{ matrix.environment }}
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #     - name: Install dependencies
  #       run: npm ci
  #     - name: Run Playwright tests
  #       run: npx playwright test --reporter=html --reporter=json --reporter=line

  # Job for manual triggers - runs selected environment only
  run-tests-manual:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'

    env:
      ENV: ${{ github.event.inputs.env }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Set environment variables
        run: |
          echo "ENV=${{ env.ENV }}" >> $GITHUB_ENV
          echo "Using configuration from src/config/${{ env.ENV }}.json"

      - name: Run Playwright tests
        run: npx playwright test --reporter=html --reporter=json --reporter=line
        if: always()

      - name: Generate Allure Report
        run: |
          npm install -g allure-commandline
          allure generate allure-results --clean -o allure-report
        if: always()

      - name: Upload HTML Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: html-report-${{ env.ENV }}
          path: test-output/html-report/
          retention-days: 30

      - name: Upload Allure Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-report-${{ env.ENV }}
          path: allure-report/
          retention-days: 30

      - name: Upload Test Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-artifacts-${{ env.ENV }}
          path: test-output/artifacts/
          retention-days: 30

      - name: Test Results Summary
        if: always()
        run: |
          echo "=== Playwright Test Summary for ${{ env.ENV }} ==="
          echo "Environment: ${{ env.ENV }}"
          echo "Configuration: src/config/${{ env.ENV }}.json"
          echo "Trigger: ${{ github.event_name }}"
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "Manual trigger by: ${{ github.actor }}"
          fi
          echo ""
          echo "ðŸ“Š Available Artifacts:"
          echo "â€¢ HTML Report: html-report-${{ env.ENV }}"
          echo "â€¢ Allure Report: allure-report-${{ env.ENV }}"
          echo "â€¢ Test Artifacts: test-artifacts-${{ env.ENV }}"
          echo ""
          [ -d "test-output/html-report" ] && echo "âœ… HTML reports: test-output/html-report"
          [ -d "allure-report" ] && echo "âœ… Allure reports: allure-report"
          [ -d "test-output/artifacts" ] && echo "âœ… Test artifacts: test-output/artifacts"
          echo "=============================="
